`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 12/20/2023 04:17:32 PM
// Design Name: 
// Module Name: traffic_light_control
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
`define TRUE 1'b1
`define FALSE 1'b0
//Delays
`define Y2RDELAY 3 //Yellow to Red delay is 3 time units.
`define R2GDELAY 2 //Red to Green delay is 2 time units.

module traffic_light_control(hwy,cntry,x,clock,reset);
input x;     //If TRUE indicates there is a car on country road, otherwise FALSE.
input clock,reset;
output reg[1:0] hwy,cntry; //2-bit output for a 3 states signals (R,Y,G).
//Declared output signals are registers.

parameter RED = 2'b00,
          YELLOW = 2'b01,
          GREEN = 2'b10;
          
//States definition
parameter S0 = 3'b000,  //hwy = G, cntry = R
          S1 = 3'b001,  //hwy = y, cntry = R
          S2 = 3'b010,  //hwy = R, cntry = R
          S3 = 3'b011,  //hwy = R, cntry = G
          S4 = 3'b100;  //hwy = R, cntry = Y

//Internal State Variable.
reg[2:0] state;
reg[2:0] next_state;

//State changes only at the positive edge of clock.
always @(posedge clock)
    if(reset)
        state<=S0;  //Controller starts in S0 (default) state.
    else
        state<=next_state;  //State changes.
        
//Compute hwy and cntry signal.
always @(state)
begin
    hwy = GREEN;
    cntry = RED;
    case(state)
        S0 : ;
        S1 : hwy = YELLOW;
        S2 : hwy = RED;
        S3 : begin
             hwy = RED;
             cntry = GREEN;
             end
        S4 : begin
             hwy = RED;
             cntry = YELLOW;
             end
    endcase
end
    
//State machine using case statement.
always @(state or x)
begin
    case(state)
        S0: if(x)
                next_state = S1;
            else
                next_state = S0;
        S1: begin
                repeat(`Y2RDELAY) @(posedge clock);
                next_state = S2;
            end
        S2: begin
                repeat(`R2GDELAY) @(posedge clock);
                next_state = S3;
            end   
        S3: if(x)
                next_state = S3;
            else
                next_state = S4;
        S4: begin
                repeat(`Y2RDELAY) @(posedge clock);
                next_state = S1;
            end 
    default: next_state = S0;
    endcase
end       
endmodule
